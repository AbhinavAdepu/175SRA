var canvas;
var stage;
var screen_width;
var screen_height;
var bmpAnimation;

var imgMonsterARun = new Image();
var imgMonsterARunflip = new Image();
var imgMonsterARunq1 = new Image();
var imgMonsterARunq2 = new Image();
var imgMonsterARunq3 = new Image();
var imgMonsterARunfinish = new Image();

function init() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("testCanvas");
	imgMonsterARun.onload = handleImageLoad;
    imgMonsterARun.onerror = handleImageError;
    imgMonsterARun.src = "images/animation/man-run.png";
	
}
function initfinish() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("testCanvas");
	imgMonsterARun.onload = handleImageLoad;
    imgMonsterARun.onerror = handleImageError;
    imgMonsterARun.src = "images/animation/man-run.png";
}
function inits() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("manCanvas");
	imgMonsterARun.onload = handleImageLoad;
    imgMonsterARun.onerror = handleImageError;
	imgMonsterARun.src = "images/animation/doctor_sequence.png";
}
function inits1() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("manCanvas1");
	imgMonsterARunflip.onload = handleImageLoad;
    imgMonsterARunflip.onerror = handleImageError;
	imgMonsterARunflip.src = "images/animation/doctor_sequence.png";
}
function inits2() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("manCanvas2");
	imgMonsterARunq1.onload = handleImageLoad;
    imgMonsterARunq1.onerror = handleImageError;
	imgMonsterARunq1.src = "images/animation/doctor_sequence.png";
}
function inits3() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("manCanvas3");
	imgMonsterARunq2.onload = handleImageLoad;
    imgMonsterARunq2.onerror = handleImageError;
	imgMonsterARunq2.src = "images/animation/doctor_sequence.png";
}
function inits4() {
    //find canvas and load images, wait for last image to load
    canvas = document.getElementById("manCanvas4");
	imgMonsterARunq3.onload = handleImageLoad;
    imgMonsterARunq3.onerror = handleImageError;
	imgMonsterARunq3.src = "images/animation/doctor_sequence.png";
}
function reset() {
    stage.removeAllChildren();
    createjs.Ticker.removeAllListeners();
    stage.update();
}
function handleImageLoad(e) {
    startGame();
}
function startGame() {
	// create a new stage and point it at our canvas:
	stage = new createjs.Stage(canvas);
	
	// grab canvas width and height for later calculations:
	screen_width = canvas.width;
	screen_height = canvas.height;
	
    // create spritesheet and assign the associated data.
    var spriteSheet = new createjs.SpriteSheet({
	    // image to use
	    images: [imgMonsterARun], 
	    // width, height & registration point of each sprite
		 frames: { width: 212, height: 220, regX: 0, regY: 32 }, 
	    // To slow down the animation loop of the sprite, we set the frequency to 4 to slow down by a 4x factor
	    animations: {
	        walk: [0, 7, "walk", 10]
	    }
    });

	// to save file size, the loaded sprite sheet only includes left facing animations
	// we could flip the display objects with scaleX=-1, but this is expensive in most browsers
	// instead, we generate a new sprite sheet which includes the flipped animations
    createjs.SpriteSheetUtils.addFlippedFrames(spriteSheet, true, false, false);
	
	// create a BitmapSequence instance to display and play back the sprite sheet:
	bmpAnimation = new createjs.BitmapAnimation(spriteSheet);
	
	// set the registration point (the point it will be positioned and rotated around)
	// to the center of the frame dimensions:
	bmpAnimation.regX = bmpAnimation.spriteSheet.frameWidth/2|0;
	bmpAnimation.regY = bmpAnimation.spriteSheet.frameHeight / 2 | 0;

    // start playing the first sequence:
    // walk_h has been generated by addFlippedFrames and
    // contained the right facing animations
	bmpAnimation.gotoAndPlay("walk"); 	//walking from left to right
	
	// set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
    // of animated rats if you disabled the shadow.
	//bmpAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

	bmpAnimation.name = "monster1";
	bmpAnimation.direction = 90;
	bmpAnimation.vX = 1;
	bmpAnimation.x = 16;
	bmpAnimation.y = 32;
		
	// have each monster start at a specific frame
	bmpAnimation.currentFrame = 10;
	stage.addChild(bmpAnimation);
		
	// we want to do some work before we update the canvas,
	// otherwise we could use Ticker.addListener(stage);
	createjs.Ticker.addListener(window);
	createjs.Ticker.useRAF = true;
	createjs.Ticker.setFPS(60);
}
//called if there is an error loading the image (usually due to a 404)
function handleImageError(e) {
	console.log("Error Loading Image : " + e.target.src);
}
function tick() {
    // Hit testing the screen width, otherwise our sprite would disappear
   // if (bmpAnimation.x >= screen_width - 16) {
        // We've reached the right side of our screen
        // We need to walk left now to go back to our initial position
    //    bmpAnimation.direction = 0;
      //  bmpAnimation.gotoAndPlay("walk_h")
    //}
    if (bmpAnimation.x < 16) {
        // We've reached the left side of our screen
        // We need to walk right now
        bmpAnimation.direction = 90;
        bmpAnimation.gotoAndPlay("walk");
    }
    // Moving the sprite based on the direction & the speed   

    // update the stage:
    stage.update();
}
function browserTester(browserString) {
    return navigator.userAgent.toLowerCase().indexOf(browserString) > -1;
}